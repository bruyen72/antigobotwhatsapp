// Gerenciador de sess√µes WhatsApp ativas
import { makeWASocket, DisconnectReason, makeCacheableSignalKeyStore, initAuthCreds } from '@whiskeysockets/baileys';
import P from 'pino';

const logger = P({ level: 'silent' });

// Armazenar sess√µes ativas em mem√≥ria global
global.activeSessions = global.activeSessions || new Map();

// Auth state persistente para cada sess√£o
function createSessionAuthState(sessionId) {
  if (!global.activeSessions.has(sessionId)) {
    global.activeSessions.set(sessionId, {
      creds: initAuthCreds(),
      keys: {},
      socket: null,
      connected: false,
      createdAt: Date.now(),
      lastActivity: Date.now()
    });
  }

  const session = global.activeSessions.get(sessionId);

  return {
    state: {
      creds: session.creds,
      keys: session.keys
    },
    saveCreds: () => {
      session.lastActivity = Date.now();
      global.activeSessions.set(sessionId, session);
    }
  };
}

export async function createPersistentConnection(sessionId, phoneNumber) {
  try {
    console.log(`Criando conex√£o persistente para: ${sessionId}`);

    const { state, saveCreds } = createSessionAuthState(sessionId);

    const sock = makeWASocket({
      auth: {
        creds: state.creds,
        keys: makeCacheableSignalKeyStore(state.keys, logger),
      },
      logger,
      printQRInTerminal: false,
      browser: ['Knight Bot WhatsApp', 'Desktop', '1.0.0'],
      markOnlineOnConnect: false,
      fireInitQueries: false,
      emitOwnEvents: false,
      generateHighQualityLinkPreview: false,
      connectTimeoutMs: 120000,  // 2 minutos para dar mais tempo
      defaultQueryTimeoutMs: 120000,  // 2 minutos
      keepAliveIntervalMs: 20000,  // 20 segundos - mais frequente
      qrTimeout: 120000,  // 2 minutos para QR
      mobile: false,
      // Configura√ß√µes para manter conex√£o mais est√°vel durante pareamento
      retryRequestDelayMs: 1000,  // Aumentar delay entre tentativas
      maxMsgRetryCount: 10,  // Mais tentativas
      // Browser mais espec√≠fico
      version: [2, 2413, 51],
      // Configura√ß√µes adicionais para estabilidade
      shouldIgnoreJid: () => false,
      shouldSyncHistoryMessage: () => false,
      transactionOpts: {
        maxCommitRetries: 10,
        delayBetweenTriesMs: 3000
      },
      // Configura√ß√µes espec√≠ficas para containers Render
      socketConfig: {
        timeout: 120000,  // 2 minutos
        keepalive: true,
        keepaliveInitialDelay: 30000,  // 30 segundos
        keepaliveInterval: 30000,  // A cada 30 segundos
        keepaliveMaxRetries: 10
      },
      // Configura√ß√µes de WebSocket para ambientes containerizados
      options: {
        headers: {
          'User-Agent': 'Knight Bot WhatsApp/1.0.0'
        },
        timeout: 120000,
        handshakeTimeout: 120000,  // Aumentar timeout do handshake
        perMessageDeflate: false  // Desabilitar compress√£o que pode causar problemas
      }
    });

    const session = global.activeSessions.get(sessionId);
    session.socket = sock;

    // Event handlers com persist√™ncia melhorada
    sock.ev.on('connection.update', (update) => {
      const { connection, lastDisconnect, qr } = update;

      console.log(`Sess√£o ${sessionId} - Connection update:`, connection);

      if (qr) {
        console.log(`üì± QR code gerado para sess√£o ${sessionId}`);
        session.qr = qr;
        session.lastActivity = Date.now();
        session.status = 'qr_generated';
      }

      if (connection === 'connecting') {
        console.log(`üîÑ Sess√£o ${sessionId} conectando...`);
        session.lastActivity = Date.now();
        session.status = 'connecting';
      }

      if (connection === 'open') {
        session.connected = true;
        session.lastActivity = Date.now();
        session.status = 'connected';
        console.log(`üü¢ Sess√£o ${sessionId} conectada com sucesso! WhatsApp pareado.`);

        // Manter conex√£o ativa por mais tempo ap√≥s pareamento
        setTimeout(() => {
          if (session.socket && session.connected) {
            console.log(`‚úÖ Mantendo sess√£o ${sessionId} ativa para uso...`);
          }
        }, 5000);
      }

      if (connection === 'close') {
        session.connected = false;
        const errorCode = lastDisconnect?.error?.output?.statusCode;

        console.log(`Sess√£o ${sessionId} fechou. C√≥digo: ${errorCode}`);

        // Prevenir loop infinito - verificar se j√° tem c√≥digo gerado
        const timeSinceCreation = Date.now() - session.createdAt;
        const maxSessionTime = 15 * 60 * 1000; // 15 minutos
        const hasValidCode = session.pairingCode && session.status === 'pairing_code_generated';

        // Se erro 405/428 e j√° tem c√≥digo v√°lido, N√ÉO reconectar
        if ((errorCode === 405 || errorCode === 428) && hasValidCode) {
          console.log(`üõë C√≥digo ${session.pairingCode} j√° gerado, aguardando pareamento no celular...`);
          session.status = 'waiting_for_pairing';
          return; // N√£o reconectar, apenas aguardar
        }

        // Reconectar apenas se n√£o foi logout, n√£o tem c√≥digo ainda, e dentro do tempo
        if (errorCode !== DisconnectReason.loggedOut && !hasValidCode && timeSinceCreation < maxSessionTime) {
          console.log(`üîÑ Tentando reconectar sess√£o ${sessionId} em 5 segundos...`);
          setTimeout(() => {
            if (global.activeSessions.has(sessionId) && !global.activeSessions.get(sessionId).pairingCode) {
              createPersistentConnection(sessionId, phoneNumber);
            }
          }, 5000); // Aumentar delay para evitar spam
        } else {
          console.log(`‚ùå Sess√£o ${sessionId} finalizada. Motivo: ${errorCode === DisconnectReason.loggedOut ? 'Logout' : hasValidCode ? 'C√≥digo gerado' : 'Timeout'}`);
          if (!hasValidCode) {
            global.activeSessions.delete(sessionId);
          }
        }
      }
    });

    sock.ev.on('creds.update', saveCreds);

    // Aguardar conex√£o estar pronta antes de gerar c√≥digo
    if (phoneNumber) {
      console.log(`üìû Preparando gera√ß√£o de c√≥digo para ${phoneNumber} na sess√£o ${sessionId}`);

      // Aguardar conex√£o estabelecer
      let connectionReady = false;
      let attempts = 0;
      const maxAttempts = 30; // 30 segundos m√°ximo

      while (!connectionReady && attempts < maxAttempts) {
        await new Promise(resolve => setTimeout(resolve, 1000));
        attempts++;

        // Verificar se a conex√£o est√° em estado "connecting" ou "open"
        if (session.status === 'connecting' || session.connected) {
          console.log(`‚úÖ Conex√£o pronta ap√≥s ${attempts}s, gerando c√≥digo...`);
          connectionReady = true;
        } else {
          console.log(`‚è≥ Aguardando conex√£o... tentativa ${attempts}/${maxAttempts}`);
        }
      }

      if (!connectionReady) {
        throw new Error('Timeout aguardando conex√£o estabilizar');
      }

      // Aguardar mais um pouco para garantir estabilidade
      await new Promise(resolve => setTimeout(resolve, 3000));

      try {
        const pairingCode = await sock.requestPairingCode(phoneNumber);
        console.log(`üîë C√≥digo gerado com sucesso: ${pairingCode} para sess√£o ${sessionId}`);

        session.pairingCode = pairingCode;
        session.phoneNumber = phoneNumber;
        session.lastActivity = Date.now();
        session.status = 'pairing_code_generated';

        global.activeSessions.set(sessionId, session);

        return {
          success: true,
          code: pairingCode,
          sessionId: sessionId,
          phoneNumber: phoneNumber,
          status: session.status
        };
      } catch (error) {
        console.error(`‚ùå Erro ao gerar c√≥digo: ${error.message}`);
        throw error;
      }
    }

    return { success: true, sessionId: sessionId };

  } catch (error) {
    console.error(`Erro ao criar conex√£o para ${sessionId}:`, error);
    return { success: false, error: error.message };
  }
}

export function getSession(sessionId) {
  return global.activeSessions.get(sessionId);
}

export function getAllSessions() {
  return Array.from(global.activeSessions.entries()).map(([id, session]) => ({
    id,
    connected: session.connected,
    phoneNumber: session.phoneNumber,
    pairingCode: session.pairingCode,
    lastActivity: session.lastActivity
  }));
}

// Cleanup de sess√µes antigas (executar periodicamente)
export function cleanupOldSessions() {
  const now = Date.now();
  const maxAge = 30 * 60 * 1000; // 30 minutos

  for (const [sessionId, session] of global.activeSessions) {
    if (now - session.lastActivity > maxAge) {
      console.log(`Removendo sess√£o antiga: ${sessionId}`);
      if (session.socket) {
        session.socket.end();
      }
      global.activeSessions.delete(sessionId);
    }
  }
}

// Cleanup autom√°tico a cada 10 minutos
setInterval(cleanupOldSessions, 10 * 60 * 1000);